{"version":3,"sources":["Todo.js","App.js","serviceWorker.js","index.js"],"names":["Todo","state","check","remove","checkTask","_this","setState","_this2","this","react_default","a","createElement","onClick","className","role","aria-label","props","item","e","deleteTask","del","Component","App","listData","newItem","lists","addTask","event","newTask","target","value","original","copy","Object","assign","name","submitTask","preventDefault","slice","push","stopPropagation","splice","map","index","src_Todo","onSubmit","onChange","type","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNA0BeA,oNAvBbC,MAAM,CACJC,MAAO,QACPC,OAAQ,WAEVC,UAAU,WACgB,UAArBC,EAAKJ,MAAMC,MACZG,EAAKC,SAAS,CAACJ,MAAO,YAEtBG,EAAKC,SAAS,CAACJ,MAAM,mFAIhB,IAAAK,EAAAC,KACP,OACIC,EAAAC,EAAAC,cAAA,MAAIC,QAASJ,KAAKJ,UAAWS,UAAYL,KAAKP,MAAMC,OAClDO,EAAAC,EAAAC,cAAA,QAAMG,KAAK,MAAMC,aAAW,SAA5B,kBAAgDP,KAAKQ,MAAMC,KACzDR,EAAAC,EAAAC,cAAA,UAAQE,UAAU,UAAUD,QAAS,SAACM,GAAD,OAAMX,EAAKS,MAAMG,WAAYD,EAAIX,EAAKS,MAAMI,OAAjF,uBAjBOC,cCwFJC,6MArFbrB,MAAQ,CACNsB,SAAU,CACVC,QAAS,KAETC,MAAO,MAGTC,QAAQ,SAACC,GAEP,IAAMC,EAAUD,EAAME,OAAOC,MACvBC,EAAW1B,EAAKJ,MAAMsB,SACtBS,EAAOC,OAAOC,OAAO,GAAIH,GAE/BC,EADYL,EAAME,OAAOM,MACbP,EAEZvB,EAAKC,SAAS,CACZiB,SAAUS,OAKdI,WAAa,SAACT,GAEZA,EAAMU,iBAEN,IAAML,EAAO3B,EAAKJ,MAAMwB,MAAMa,MAAM,GAEpCN,EAAKO,KAAKlC,EAAKJ,MAAMsB,SAASC,SAG9BnB,EAAKC,SAAS,CACZmB,MAAOO,EAEPT,SAAS,CACTC,QAAS,UAGbL,WAAY,SAACD,EAAIE,GAEfF,EAAEsB,kBACF,IAAMR,EAAO3B,EAAKJ,MAAMwB,MAAMa,MAAM,GACpCN,EAAKS,OAAOrB,EAAI,GAEdf,EAAKC,SAAS,CACZmB,MAAOO,6EAIJ,IAAAzB,EAAAC,KAEDiB,EAAQjB,KAAKP,MAAMwB,MAAMiB,IAAI,SAACzB,EAAO0B,GAAR,OAEnClC,EAAAC,EAAAC,cAACiC,EAAD,CAAM3B,KAAOA,EAAME,WAAYZ,EAAKY,WAAYC,IAAKuB,MAErD,OACElC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,6CAIAF,EAAAC,EAAAC,cAAA,QAAMkC,SAAUrC,KAAK4B,YACrB3B,EAAAC,EAAAC,cAAA,8CAIEF,EAAAC,EAAAC,cAAA,SACEwB,KAAK,UACLW,SAAUtC,KAAKkB,QACfI,MAAOtB,KAAKP,MAAMsB,SAASC,QAC3BuB,KAAK,SAELtC,EAAAC,EAAAC,cAAA,UAAQE,UAAU,SAASkC,KAAM,UAAjC,SAMFtC,EAAAC,EAAAC,cAAA,UAAKc,WAhFGJ,aCQE2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e9b94e17.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Todo extends Component {\n  state={\n    check: 'false',\n    remove: 'false' \n    }\n  checkTask=()=>{\n    if(this.state.check === 'false'){\n      this.setState({check: 'checked' })\n    }else {\n      this.setState({check:'false'})\n    }\n  }\n\n  render() {\n    return (\n        <li onClick={this.checkTask} className= {this.state.check}>\n          <span role=\"img\" aria-label=\"emoji\">ðŸ“Œ  </span>{this.props.item}       \n            <button className=\"button2\" onClick={(e)=> this.props.deleteTask( e , this.props.del)}>Delete Task</button>\n              {/* type=\"delete\"*/}\n              {/* name=\"deleteTask\"*/}\n        </li>\n   )}\n  }\n  \nexport default Todo;\n  \n  \n\n ","import React, { Component } from 'react';\nimport './App.css';\nimport Todo from './Todo';\n\nclass App extends Component {\n  state = {\n    listData: {\n    newItem: ' '\n  },\n    lists: []\n  } \n  // makes an event that adds the tasks \n  addTask=(event)=>{\n    //it gets the values to make new task \n    const newTask = event.target.value\n    const original = this.state.listData\n    const copy = Object.assign({}, original)\n    const key = event.target.name\n    copy[key] = newTask\n    // sets up the new item or task \n    this.setState({\n      listData: copy\n    })\n    // console.log(\"efiehfgoe\")\n  }\n  //\n  submitTask = (event) => {\n    //stops the page from refreshing\n    event.preventDefault();\n    //copys the items \n    const copy = this.state.lists.slice(0);\n    //pushes and adds the new tasks \n    copy.push(this.state.listData.newItem)\n    \n    //it sets the new copy to the original \n    this.setState({\n      lists: copy,\n\n      listData:{\n      newItem: \" \"},\n    })\n  }\n  deleteTask= (e , del )=>{\n    //an event that implement the change to only one and leaving the other\n    e.stopPropagation()\n    const copy = this.state.lists.slice(0)\n    copy.splice(del,1);\n\n      this.setState({\n        lists: copy\n      })\n    }\n  //shares the react components using props \n  render() {\n    //goes through the list items and map them to get the items inside \n    const lists = this.state.lists.map((item , index) => \n    //we pass the functions we want to use in the todo file\n    <Todo item ={item} deleteTask={this.deleteTask} del={index} />)\n    //return the values \n    return (\n      <div>\n      <div className=\"Box\">\n        <h1>MY TODO list</h1>\n        <h2>Pin down your tasksðŸ“Œ</h2>\n        {/* \n          form element that collects the inputs (tasks)\n        */}\n        <form onSubmit={this.submitTask}>\n        <label>What do you want to do today?</label>\n          {/* \n            creates a box to input informations \n          */}\n          <input\n            name=\"newItem\" \n            onChange={this.addTask} \n            value={this.state.listData.newItem} \n            type=\"text\" \n            /> \n            <button className=\"button\" type =\"submit\">Add</button>\n          </form>\n          {/* \n            takes the items and puts them in a list \n          */}\n          </div>\n          <ul>{lists}</ul>\n          </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}